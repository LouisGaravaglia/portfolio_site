{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n/**\n* Hook to constantly monitor viewport dimensions so that I can change make any\n* changes to state or react variables for responsive design.\n*/\n\nconst useViewport = () => {\n  _s();\n\n  const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\n  const [viewportHeight, setViewportHeight] = useState(window.innerHeight);\n  useEffect(() => {\n    const handleWindowResize = () => {\n      setViewportWidth(window.innerWidth);\n      setViewportHeight(window.innerHeight);\n    };\n\n    window.addEventListener(\"resize\", handleWindowResize);\n    return () => window.removeEventListener(\"resize\", handleWindowResize);\n  }, []);\n  return {\n    viewportWidth,\n    viewportHeight\n  };\n};\n\n_s(useViewport, \"LuLgizYkTKuk0Pa3ufRXYly5g4k=\");\n\nexport default useViewport;","map":{"version":3,"sources":["/Users/louieg3/Documents/Web_development/portfolio_site/frontend/src/hooks/useViewport.js"],"names":["useState","useEffect","useViewport","viewportWidth","setViewportWidth","window","innerWidth","viewportHeight","setViewportHeight","innerHeight","handleWindowResize","addEventListener","removeEventListener"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AAEA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAACK,MAAM,CAACC,UAAR,CAAlD;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAACK,MAAM,CAACI,WAAR,CAApD;AAEAR,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMS,kBAAkB,GAAG,MAAM;AAC/BN,MAAAA,gBAAgB,CAACC,MAAM,CAACC,UAAR,CAAhB;AACAE,MAAAA,iBAAiB,CAACH,MAAM,CAACI,WAAR,CAAjB;AACD,KAHD;;AAKAJ,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCD,kBAAlC;AACA,WAAO,MAAML,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCF,kBAArC,CAAb;AACD,GATQ,EASN,EATM,CAAT;AAWA,SAAO;AAACP,IAAAA,aAAD;AAAgBI,IAAAA;AAAhB,GAAP;AACD,CAhBD;;GAAML,W;;AAkBN,eAAeA,WAAf","sourcesContent":["import {useState, useEffect} from \"react\";\n\n/**\n* Hook to constantly monitor viewport dimensions so that I can change make any\n* changes to state or react variables for responsive design.\n*/\nconst useViewport = () => {\n  const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\n  const [viewportHeight, setViewportHeight] = useState(window.innerHeight);\n\n  useEffect(() => {\n\n    const handleWindowResize = () => {\n      setViewportWidth(window.innerWidth);\n      setViewportHeight(window.innerHeight);\n    };\n\n    window.addEventListener(\"resize\", handleWindowResize);\n    return () => window.removeEventListener(\"resize\", handleWindowResize);\n  }, []);\n\n  return {viewportWidth, viewportHeight};\n};\n\nexport default useViewport;"]},"metadata":{},"sourceType":"module"}